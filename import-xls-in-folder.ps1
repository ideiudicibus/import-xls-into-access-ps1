$empty = "<NULL>"
$scriptVersion="0.0.1"
$scriptRelease="Test"
$author="i.deiudicibus@gmail.com"

$itmType = "Directory", "File"

function Write-ProgressForm {
	<#
	.SYNOPSIS
		Write-ProgressForm V1.0
		GUI Replacement for PowerShell's Write-Progress command

	.DESCRIPTION
		GUI Replacement for PowerShell's Write-Progress command
		Uses same named parameters for drop-in replacement
		CAVEATS: You can't close the Form by clicking on it, must call Write-ProgressForm -Completed
				 Therefore decided to hide Close button (why tease people?)

	.INPUTS
		Same as Write-Progress command 
		BONUS:
		-ICOpath <path to your ICO>
		-FormTitle <Title of the Write-progress form> 
		(Only needs to be mentioned when 1st called then it sticks around)
		
	.OUTPUTS
		Nothing but a GUI

	.NOTES
		Uses Global variables extensively
		License: GPL v3.0 or greater / BSD (Latest version)
		Form Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
		Generated On: 30/01/2013 12:38 PM
		Generated By: Denis St-Pierre, Ottawa, Canada
	#>
	
	param(	#parameters with default values assigned
		[String]$Activity="Activity",
		[String]$CurrentOperation="CurrentOperation",
		[String]$status="Status",
		[Int]$PercentComplete=0,
		[switch]$Completed=$false,
		[int]$FontSize = 10,
		[String]$ICOpath="",	#yes, you can use your *OWN* icon file in the form
		[String]$FormTitle=""
		
	)
	
	$HideUselessCloseButton=$true	#Change to false if you can fix it, pls
	$UselessAutoSize=$false			#Useless because it doesn't work as expected
	
	#If WriteProgressForm variable exists, use it.
	If ( Get-Variable -Name WriteProgressForm -Scope Global -ErrorAction SilentlyContinue ) {
		If ( $Completed){	#If asked to close, do it
			$progressBar1.Value=100
			$StatusLabel.Text = "Complete"
			Start-Sleep -Seconds 1
			$WriteProgressForm.close()
			Return
		} else {		#otherwise, Update it
			$progressBar1.Value = $PercentComplete	#To update Progress bar position
			$ActivityLabel.Text = "$Activity"
			$CurrentOperationLabel.Text = "$CurrentOperation"
			$StatusLabel.Text = "$status"
			Return
		}
	}

	#region Import the Assemblies
	[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
	[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
	#endregion

	#region Generated Form Objects
	$global:WriteProgressForm = New-Object System.Windows.Forms.Form
	$global:StatusLabel = New-Object System.Windows.Forms.Label
	$CloseButton = New-Object System.Windows.Forms.Button
	$global:progressBar1 = New-Object System.Windows.Forms.ProgressBar
	$global:CurrentOperationLabel = New-Object System.Windows.Forms.Label
	$global:ActivityLabel = New-Object System.Windows.Forms.Label
	$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
	#endregion Generated Form Objects

	#----------------------------------------------
	#Generated Event Script Blocks
	#----------------------------------------------
	#Provide Custom Code for events specified in PrimalForms.
#	$WriteProgressForm.close()= 
#	{
	#TODO: Place custom script here	
#	}

	$CloseButton_OnClick= 
	{
	#TODO: Place custom script here

	}

	$OnLoadForm_StateCorrection=
	{#Correct the initial state of the form to prevent the .Net maximized form issue
		$WriteProgressForm.WindowState = $InitialFormWindowState
	}

	#----------------------------------------------
	#region Generated Form Code
	$WriteProgressForm.AccessibleDescription = "WriteProgressFormDesc"
	$WriteProgressForm.AccessibleName = "WriteProgressForm"
	$WriteProgressForm.AccessibleRole = 48
	$WriteProgressForm.AutoSize = $true		#works on forms, labels not so much
	$WriteProgressForm.AutoSizeMode = 0
	$System_Drawing_Size = New-Object System.Drawing.Size
#	$System_Drawing_Size.Height = 170
#	$System_Drawing_Size.Width = 505
#	$WriteProgressForm.ClientSize = $System_Drawing_Size
	$WriteProgressForm.DataBindings.DefaultDataSourceUpdateMode = 0
	$WriteProgressForm.StartPosition = 1 #Center of the Screen
	#add Icon to dialog, if possible
	If ( ($ICOpath -ne "") -and (Test-Path "$ICOpath") ) {
		Try {	#If the ICO file is NFG, ignore and move on
			$WriteProgressForm.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon("$ICOpath")
		} catch { } #use default ICO
	}
	$WriteProgressForm.Name = "WriteProgressForm"
	$WriteProgressForm.Text = "$FormTitle"
#	$WriteProgressForm.add_FormClosing($WriteProgressForm.close()) #failed attempt to make CloseButton work w/o PS code

	# ** $StatusLabel
	$StatusLabel.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 15
	$System_Drawing_Point.Y = 33
	$StatusLabel.Location = $System_Drawing_Point
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 20
	$System_Drawing_Size.Width = 475
	$StatusLabel.MinimumSize = $System_Drawing_Size
	$StatusLabel.AutoSize = $UselessAutoSize
	$StatusLabel.Name = "StatusLabel"
	$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
	$System_Windows_Forms_Padding.All = 1
	$System_Windows_Forms_Padding.Bottom = 1
	$System_Windows_Forms_Padding.Left = 1
	$System_Windows_Forms_Padding.Right = 1
	$System_Windows_Forms_Padding.Top = 1
	$StatusLabel.Padding = $System_Windows_Forms_Padding
#	$System_Drawing_Size = New-Object System.Drawing.Size
#	$System_Drawing_Size.Height = 20
#	$System_Drawing_Size.Width = 475
#	$StatusLabel.Size = $System_Drawing_Size
	$StatusLabel.TabIndex = 4
	$StatusLabel.Text = "$status"
	
	$WriteProgressForm.Controls.Add($StatusLabel)
	
	# ** $CloseButton
	$CloseButton.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 400
	$System_Drawing_Point.Y = 134
	$CloseButton.Location = $System_Drawing_Point
	$CloseButton.Name = "CloseButton"
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 25
	$System_Drawing_Size.Width = 90
	$CloseButton.Size = $System_Drawing_Size
	$CloseButton.TabIndex = 3
	$CloseButton.Text = "Close"
	$CloseButton.UseVisualStyleBackColor = $True
	$CloseButton.add_Click($CloseButton_OnClick)
#	$CloseButton.add_MouseClick($WriteProgressForm.close()) #failed attempt #2 to make CloseButton work w/o PS code
	
	If ($HideUselessCloseButton) {
		#dont add button to form
	} else {
		$WriteProgressForm.Controls.Add($CloseButton)
	}
	
	# ** $progressBar1
	$progressBar1.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 10
	$System_Drawing_Point.Y = 57
	$progressBar1.Location = $System_Drawing_Point
	$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
	$System_Windows_Forms_Padding.All = 5
	$System_Windows_Forms_Padding.Bottom = 5
	$System_Windows_Forms_Padding.Left = 5
	$System_Windows_Forms_Padding.Right = 5
	$System_Windows_Forms_Padding.Top = 5
	$progressBar1.Margin = $System_Windows_Forms_Padding
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 30
	$System_Drawing_Size.Width = 480
	$progressBar1.MinimumSize = $System_Drawing_Size
	$progressBar1.AutoSize = $UselessAutoSize	#doesn't work, stays the same size
	$progressBar1.Name = "progressBar1"
#	$System_Drawing_Size = New-Object System.Drawing.Size
#	$System_Drawing_Size.Height = 30
#	$System_Drawing_Size.Width = 480
#	$progressBar1.Size = $System_Drawing_Size
	$progressBar1.Step = 1
	$progressBar1.Style = 1
	$progressBar1.TabIndex = 2
	$progressBar1.Value = $PercentComplete	#Progress bar position
	
	$WriteProgressForm.Controls.Add($progressBar1)
	
	# ** $CurrentOperationLabel
	$CurrentOperationLabel.AccessibleDescription = "CurrentOperationDesc"
	$CurrentOperationLabel.AccessibleName = "CurrentOperation"
	$CurrentOperationLabel.AccessibleRole = 0
	$CurrentOperationLabel.CausesValidation = $False
	$CurrentOperationLabel.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 15
	$System_Drawing_Point.Y = 100
	$CurrentOperationLabel.Location = $System_Drawing_Point
	$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
	$System_Windows_Forms_Padding.All = 1
	$System_Windows_Forms_Padding.Bottom = 1
	$System_Windows_Forms_Padding.Left = 1
	$System_Windows_Forms_Padding.Right = 1
	$System_Windows_Forms_Padding.Top = 1
	$CurrentOperationLabel.Margin = $System_Windows_Forms_Padding
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 20
	$System_Drawing_Size.Width = 475
	$CurrentOperationLabel.MinimumSize = $System_Drawing_Size
	$CurrentOperationLabel.AutoSize = $UselessAutoSize
	$CurrentOperationLabel.Name = "CurrentOperationLabel"
	$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
	$System_Windows_Forms_Padding.All = 1
	$System_Windows_Forms_Padding.Bottom = 1
	$System_Windows_Forms_Padding.Left = 1
	$System_Windows_Forms_Padding.Right = 1
	$System_Windows_Forms_Padding.Top = 1
	$CurrentOperationLabel.Padding = $System_Windows_Forms_Padding
#	$System_Drawing_Size = New-Object System.Drawing.Size
#	$System_Drawing_Size.Height = 20
#	$System_Drawing_Size.Width = 475
#	$CurrentOperationLabel.Size = $System_Drawing_Size
	$CurrentOperationLabel.TabIndex = 1
	$CurrentOperationLabel.Text = "$CurrentOperation"
	
	$WriteProgressForm.Controls.Add($CurrentOperationLabel)
	
	# ** $ActivityLabel
#	$ActivityLabel.CausesValidation = $False
	$ActivityLabel.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 10
	$System_Drawing_Point.Y = 10
	$ActivityLabel.Location = $System_Drawing_Point
	$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
	$System_Windows_Forms_Padding.All = 1
	$System_Windows_Forms_Padding.Bottom = 1
	$System_Windows_Forms_Padding.Left = 1
	$System_Windows_Forms_Padding.Right = 1
	$System_Windows_Forms_Padding.Top = 1
	$ActivityLabel.Margin = $System_Windows_Forms_Padding
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 20
	$System_Drawing_Size.Width = 480
	$ActivityLabel.MinimumSize = $System_Drawing_Size
	$ActivityLabel.Name = "ActivityLabel"
	$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
	$System_Windows_Forms_Padding.All = 1
	$System_Windows_Forms_Padding.Bottom = 1
	$System_Windows_Forms_Padding.Left = 1
	$System_Windows_Forms_Padding.Right = 1
	$System_Windows_Forms_Padding.Top = 1
	$ActivityLabel.Padding = $System_Windows_Forms_Padding
	$ActivityLabel.AutoSize = $UselessAutoSize
#	$System_Drawing_Size = New-Object System.Drawing.Size
#	$System_Drawing_Size.Height = 20
#	$System_Drawing_Size.Width = 480
#	$ActivityLabel.Size = $System_Drawing_Size
	$ActivityLabel.TabIndex = 0
	$ActivityLabel.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",$FontSize,1,3,1)
	$ActivityLabel.Text = "$Activity"

	$WriteProgressForm.Controls.Add($ActivityLabel)

	#endregion Generated Form Code

	#Save the initial state of the form
	$InitialFormWindowState = $WriteProgressForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$WriteProgressForm.add_Load($OnLoadForm_StateCorrection)
	
	#Show the Form
#	$WriteProgressForm.ShowDialog()| Out-Null #ShowDialog waits until it is closed
	$WriteProgressForm.Show()		#show form and keep on going
	$WriteProgressForm.activate()	#Make sure its on top
	Start-sleep -Milliseconds 500	#was needed to give time for form to fully draw itself
} #End Function

try {
	$WriteProgressForm.close()
	Remove-Variable StatusLabel | Out-Null
	Remove-Variable CurrentOperationLabel | Out-Null
	Remove-Variable progressBar1 | Out-Null
	Remove-Variable ActivityLabel | Out-Null
	Remove-Variable WriteProgressForm
} catch {
	#go on
}

function LoadTreeView {
  $nodes = [IO.Directory]::GetLogicalDrives()

  $trvRoot.Nodes.Clear()

  foreach ($nod in $nodes) {
    $node = New-Object Windows.Forms.TreeNode
    $node = $trvRoot.Nodes.Add($nod)
    $node.Nodes.Add($empty)
  }
}

function AddFolders {
  $strPath = $_.Node.FullPath
  $_.Node.Nodes.Clear()

  trap {[Windows.Forms.MessageBox]::Show($_.Exception.Message, "Error", `
        [Windows.Forms.MessageBoxButtons]::OK, `
        [Windows.Forms.MessageBoxIcon]::Exclamation); continue }
  foreach ($strDir in [IO.Directory]::GetDirectories($strPath)) {
    $newNode = $_.Node.Nodes.Add([IO.Path]::GetFileName($strDir))
    $newNode.Tag = $itmType[0]
    $newNode.Nodes.Add($empty)
  }
}

function AddFiles {
  $strPath = $_.Node.FullPath

  $ErrorActionPreference = "SilentlyContinue"
  foreach ($strFile in [IO.Directory]::GetFiles($strPath)) {
    $newNode = $_.Node.Nodes.Add([IO.Path]::GetFileName($strFile))
    $newNode.Tag = $itmType[1]
  }
}

function ClearProperties {
  $lblAttributes.Text = [String]::Empty
  $lblCreationTime.Text = [String]::Empty
  $lblLastAccessTime.Text = [String]::Empty
  $lblLastWriteTime.Text = [String]::Empty
  $lblExtension.Text = [String]::Empty
  $lblFullName.Text = [String]::Empty
  $lblName.Text = [String]::Empty
  $lblParent.Text = [String]::Empty
  $lblRoot.Text = [String]::Empty
  $lblLength.Text = [String]::Empty
}

$trvRoot_OnBeforeExpand= {
  AddFolders
  AddFiles
}

$trvRoot_OnAfterSelect= {
  if ($_.Node.Tag -eq $itmType[0]) {
    $lblExtension.Text = [String]::Empty
    $lblLength.Text = [String]::Empty

    $lblLabel5.Enabled = $false
    $lblLabel8.Enabled = $true
    $lblLabel9.Enabled = $true
    $lblLabel10.Enabled = $false

    $di = [IO.DirectoryInfo]($_.Node.FullPath)
    $lblAttributes.Text = $di.Attributes
    $lblCreationTime.Text = $di.CreationTime
    $lblLastAccessTime.Text = $di.LastAccessTime
    $lblLastWriteTime.Text = $di.LastWriteTime
    $lblFullName.Text = $di.FullName
    $lblName.Text = $di.Name
    $lblParent.Text = $di.Parent.Name
    $lblRoot.Text = $di.Root.Name
  }
  elseif ($_.Node.Tag -eq $itmType[1]) {
    $lblParent.Text = [String]::Empty
    $lblRoot.Text = [String]::Empty

    $lblLabel5.Enabled = $true
    $lblLabel8.Enabled = $false
    $lblLabel9.Enabled = $false
    $lblLabel10.Enabled = $true

    $fi = [IO.FileInfo]($_.Node.FullPath)
    $lblAttributes.Text = $fi.Attributes
    $lblCreationTime.Text = $fi.CreationTime
    $lblLastAccessTime.Text = $fi.LastAccessTime
    $lblLastWriteTime.Text = $fi.LastWriteTime
    $lblExtension.Text = $fi.Extension
    $lblFullName.Text = $fi.FullName
    $lblName.Text = $fi.Name
    $lblLength.Text = $fi.Length
  }
  else {
    ClearProperties
  }
}

$mnuRefresh_OnClick= {
  LoadTreeView
  ClearProperties
}

Function Create-DataBase($Db){
 $lblOpstatus.Text="creating new db $Db"
 #Write-ProgressForm -Activity "creating new access db: $Db" -PercentComplete 10 -CurrentOperation "creating" -Status "10% complete."
 $application = New-Object -ComObject Access.Application
 $application.NewCurrentDataBase($Db)
 $application.CloseCurrentDataBase()
 #Write-ProgressForm -Activity "creating new access db: $Db" -PercentComplete 60 -CurrentOperation "finishin" -Status "60% complete."
 $application.Quit()
 $lblOpstatus.Text="created new $Db"
 #Write-ProgressForm -Activity "creating new access db: $Db" -PercentComplete 100 -CurrentOperation "creating" -Status "100% complete."
 sleep 0.5
 $lblOpstatus.Text=""
 
}

$frmMain_OnLoad= {
  LoadTreeView
}

function ShowMainWindow {
  [void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
  [void][Reflection.Assembly]::LoadWithPartialName("System.Drawing")

  [Windows.Forms.Application]::EnableVisualStyles()

  $frmMain = New-Object Windows.Forms.Form
  $mnuMain = New-Object Windows.Forms.MainMenu
  $mnuFile = New-Object Windows.Forms.MenuItem
  $mnuRefresh = New-Object Windows.Forms.MenuItem
  $mnuExit = New-Object Windows.Forms.MenuItem
  $mnuHelp = New-Object Windows.Forms.MenuItem
  $mnuAbout = New-Object Windows.Forms.MenuItem
  $trvRoot = New-Object Windows.Forms.TreeView
  $lblLabel1 = New-Object Windows.Forms.Label
  $lblLabel2 = New-Object Windows.Forms.Label
  $lblLabel3 = New-Object Windows.Forms.Label
  $lblLabel4 = New-Object Windows.Forms.Label
  $lblLabel5 = New-Object Windows.Forms.Label
  $lblLabel6 = New-Object Windows.Forms.Label
  $lblLabel7 = New-Object Windows.Forms.Label
  $lblLabel8 = New-Object Windows.Forms.Label
  $lblLabel9 = New-Object Windows.Forms.Label
  $lblLabel10 = New-Object Windows.Forms.Label
  $lblAttributes = New-Object Windows.Forms.Label
  $lblCreationTime = New-Object Windows.Forms.Label
  $lblLastAccessTime = New-Object Windows.Forms.Label
  $lblLastWriteTime = New-Object Windows.Forms.Label
  $lblExtension = New-Object Windows.Forms.Label
  $lblFullName = New-Object Windows.Forms.Label
  $lblName = New-Object Windows.Forms.Label
  $lblParent = New-Object Windows.Forms.Label
  $lblRoot = New-Object Windows.Forms.Label
  $lblLength = New-Object Windows.Forms.Label
  $lblOpstatus = New-Object Windows.Forms.Label
  $btnImport = New-Object System.Windows.Forms.Button
  

  #mnuMain
  $mnuMain.MenuItems.AddRange(@($mnuFile, $mnuHelp))

  #mnuFile
  $mnuFile.MenuItems.AddRange(@($mnuRefresh, $mnuExit))
  $mnuFile.Text = "&File"

  #mnuRefresh
  $mnuRefresh.Shortcut = "F5"
  $mnuRefresh.Text = "&Refresh"
  $mnuRefresh.Add_Click($mnuRefresh_OnClick)

  #mnuExit
  $mnuExit.Shortcut = "CtrlX"
  $mnuExit.Text = "E&xit"
  $mnuExit.Add_Click( { $frmMain.Close() } )

  #mnuHelp
  $mnuHelp.MenuItems.AddRange(@($mnuAbout))
  $mnuHelp.Text = "&Help"

  #mnuAbout
  $mnuAbout.Text = "About"
  $mnuAbout.Add_Click( { ShowAboutWindow } )

  #trvRoot
  $trvRoot.Anchor = "Top, Bottom, Left, Right"
  $trvRoot.Location = New-Object Drawing.Point(8, 8)
  $trvRoot.Size = New-Object Drawing.Size(392, 195)
  $trvRoot.Add_BeforeExpand($trvRoot_OnBeforeExpand)
  $trvRoot.Add_AfterSelect($trvRoot_OnAfterSelect)

  #lblLabel1
  $lblLabel1.Anchor = "Bottom, Left"
  $lblLabel1.Location = New-Object Drawing.Point(8, 210)
  $lblLabel1.Size = New-Object Drawing.Size(104, 23)
  $lblLabel1.Text = "Attributes:"
  $lblLabel1.TextAlign = "MiddleRight"

  #lblLabel2
  $lblLabel2.Anchor = "Bottom, Left"
  $lblLabel2.Location = New-Object Drawing.Point(8, 234)
  $lblLabel2.Size = New-Object Drawing.Size(104, 23)
  $lblLabel2.Text = "Creation Time:"
  $lblLabel2.TextAlign = "MiddleRight"

  #lblLabel3
  $lblLabel3.Anchor = "Bottom, Left"
  $lblLabel3.Location = New-Object Drawing.Point(8, 258)
  $lblLabel3.Size = New-Object Drawing.Size(104, 23)
  $lblLabel3.Text = "Last Access Time:"
  $lblLabel3.TextAlign = "MiddleRight"

  #lblLabel4
  $lblLabel4.Anchor = "Bottom, Left"
  $lblLabel4.Location = New-Object Drawing.Point(8, 282)
  $lblLabel4.Size = New-Object Drawing.Size(104, 23)
  $lblLabel4.Text = "Last Write Time:"
  $lblLabel4.TextAlign = "MiddleRight"

  #lblLabel5
  $lblLabel5.Anchor = "Bottom, Left"
  $lblLabel5.Location = New-Object Drawing.Point(8, 314)
  $lblLabel5.Size = New-Object Drawing.Size(104, 23)
  $lblLabel5.Text = "Extension:"
  $lblLabel5.TextAlign = "MiddleRight"

  #lblLabel6
  $lblLabel6.Anchor = "Bottom, Left"
  $lblLabel6.Location = New-Object Drawing.Point(8, 338)
  $lblLabel6.Size = New-Object Drawing.Size(104, 23)
  $lblLabel6.Text = "Full Name:"
  $lblLabel6.TextAlign = "MiddleRight"

  #lblLabel7
  $lblLabel7.Anchor = "Bottom, Left"
  $lblLabel7.Location = New-Object Drawing.Point(8, 362)
  $lblLabel7.Size = New-Object Drawing.Size(104, 23)
  $lblLabel7.Text = "Name:"
  $lblLabel7.TextAlign = "MiddleRight"

  #lblLabel8
  $lblLabel8.Anchor = "Bottom, Left"
  $lblLabel8.Location = New-Object Drawing.Point(8, 386)
  $lblLabel8.Size = New-Object Drawing.Size(104, 23)
  $lblLabel8.Text = "Parent:"
  $lblLabel8.TextAlign = "MiddleRight"

  #lblLabel9
  $lblLabel9.Anchor = "Bottom, Left"
  $lblLabel9.Location = New-Object Drawing.Point(8, 410)
  $lblLabel9.Size = New-Object Drawing.Size(104, 23)
  $lblLabel9.Text = "Root:"
  $lblLabel9.TextAlign = "MiddleRight"

  #lblLabel10
  $lblLabel10.Anchor = "Bottom, Left"
  $lblLabel10.Location = New-Object Drawing.Point(8, 434)
  $lblLabel10.Size = New-Object Drawing.Size(104, 23)
  $lblLabel10.Text = "Length:"
  $lblLabel10.TextAlign = "MiddleRight"

  #lblAttributes
  $lblAttributes.Anchor = "Bottom, Left, Right"
  $lblAttributes.BorderStyle = "Fixed3D"
  $lblAttributes.Location = New-Object Drawing.Point(120, 211)
  $lblAttributes.Size = New-Object Drawing.Size(280, 20)
  $lblAttributes.TextAlign = "MiddleLeft"

  #lblCreationTime
  $lblCreationTime.Anchor = "Bottom, Left, Right"
  $lblCreationTime.BorderStyle = "Fixed3D"
  $lblCreationTime.Location = New-Object Drawing.Point(120, 235)
  $lblCreationTime.Size = New-Object Drawing.Size(280, 20)
  $lblCreationTime.TextAlign = "MiddleLeft"

  #lblLastAccessTime
  $lblLastAccessTime.Anchor = "Bottom, Left, Right"
  $lblLastAccessTime.BorderStyle = "Fixed3D"
  $lblLastAccessTime.Location = New-Object Drawing.Point(120, 259)
  $lblLastAccessTime.Size = New-Object Drawing.Size(280, 20)
  $lblLastAccessTime.TextAlign = "MiddleLeft"

  #lblLastWriteTime
  $lblLastWriteTime.Anchor = "Bottom, Left, Right"
  $lblLastWriteTime.BorderStyle = "Fixed3D"
  $lblLastWriteTime.Location = New-Object Drawing.Point(120, 283)
  $lblLastWriteTime.Size = New-Object Drawing.Size(280, 20)
  $lblLastWriteTime.TextAlign = "MiddleLeft"

  #lblExtension
  $lblExtension.Anchor = "Bottom, Left, Right"
  $lblExtension.BorderStyle = "Fixed3D"
  $lblExtension.Location = New-Object Drawing.Point(120, 315)
  $lblExtension.Size = New-Object Drawing.Size(280, 20)
  $lblExtension.TextAlign = "MiddleLeft"

  #lblFullName
  $lblFullName.Anchor = "Bottom, Left, Right"
  $lblFullName.BorderStyle = "Fixed3D"
  $lblFullName.Location = New-Object Drawing.Point(120, 339)
  $lblFullName.Size = New-Object Drawing.Size(280, 20)
  $lblFullName.TextAlign = "MiddleLeft"

  #lblName
  $lblName.Anchor = "Bottom, Left, Right"
  $lblName.BorderStyle = "Fixed3D"
  $lblName.Location = New-Object Drawing.Point(120, 363)
  $lblName.Size = New-Object Drawing.Size(280, 20)
  $lblName.TextAlign = "MiddleLeft"

  #lblParent
  $lblParent.Anchor = "Bottom, Left, Right"
  $lblParent.BorderStyle = "Fixed3D"
  $lblParent.Location = New-Object Drawing.Point(120, 387)
  $lblParent.Size = New-Object Drawing.Size(280, 20)
  $lblParent.TextAlign = "MiddleLeft"

  #lblRoot
  $lblRoot.Anchor = "Bottom, Left, Right"
  $lblRoot.BorderStyle = "Fixed3D"
  $lblRoot.Location = New-Object Drawing.Point(120, 411)
  $lblRoot.Size = New-Object Drawing.Size(280, 20)
  $lblRoot.TextAlign = "MiddleLeft"

  #lblLength
  $lblLength.Anchor = "Bottom, Left, Right"
  $lblLength.BorderStyle = "Fixed3D"
  $lblLength.Location = New-Object Drawing.Point(120, 435)
  $lblLength.Size = New-Object Drawing.Size(280, 20)
  $lblLength.TextAlign = "MiddleLeft"

  #btnImport
  $btnImport.Anchor = "Bottom, Left, Right"
  $btnImport.Location = New-Object Drawing.Point(120, 460)
  $btnImport.Size = New-Object Drawing.Size(280, 20) 
  $btnImport.Text = "Import Folder"

  #lblOpstatus
  $lblOpstatus.Anchor = "Bottom, Left, Right"
  $lblOpstatus.Location = New-Object Drawing.Point(120, 485)
  $lblOpstatus.Size = New-Object Drawing.Size(280,60)
  $lblOpstatus.TextAlign = "MiddleLeft"
  $lblOpstatus.BorderStyle = "Fixed3D"
  $lblOpstatus.Text=""
  


  $btnImport.add_click({
  $lblOpstatus.Text=""
  $rootFolder=$lblFullName.Text
  $rootFolderSimpleName=$lblName.Text
  $acExport = 1
  $acSpreadsheetTypeExcel9 = 8

  $dbName =$rootFolder+"\$scriptRelease"+$(((get-date).ToUniversalTime()).ToString("yyyyMMddThhmmss"))+".accdb" #$rootFolder+"\"+$rootFolderSimpleName+$(((get-date).ToUniversalTime()).ToString("yyyyMMddThhmmss"))+".accdb"
  
  Create-DataBase $dbName
  
  $acExport = 1
  $acSpreadsheetTypeExcel9 = 8


$db = New-Object -Comobject Access.Application
$db.OpenCurrentDatabase($dbName)
Start-Sleep -s 0.25

$FileXls = get-childitem $rootFolder -recurse | where {$_.extension -eq ".xlsx"} 

for ($i=0; $i -lt $FileXls.Count; $i++) {
    Start-Sleep -s 0.25
    $fileNameImported=$FileXls[$i].BaseName;
    $db.DoCmd.TransferSpreadsheet($acImport, $acSpreadsheetTypeExcel9,  $FileXls[$i].BaseName, $FileXls[$i].FullName, $True)
    $lblOpstatus.Text ="importing $fileNameImported"
    #Write-ProgressForm -Activity "importing xls $fileNameImported" -PercentComplete ($i / $FileXls.count*100) -CurrentOperation "importing" -Status "($i / $FileXls.count*100)% complete."
}
    $db.Quit()
    #Write-ProgressForm -Activity "Complete" -Completed -Status "Complete"
    $lblOpstatus.Text="Done: imported $rootFolder into $dbName"
  })
  

  #frmMain
  $frmMain.ClientSize = New-Object Drawing.Size(450,580)
  $frmMain.Controls.AddRange(@($trvRoot, $lblLabel1, $lblLabel2, $lblLabel3, $lblLabel4, `
                             $lblLabel5, $lblLabel6, $lblLabel7, $lblLabel8, $lblLabel9, `
                             $lblLabel10, $lblAttributes, $lblCreationTime, $lblLastAccessTime, `
                             $lblLastWriteTime, $lblExtension, $lblFullName, $lblName, `
                             $lblParent, $lblRoot, $lblLength,$btnImport,$lblOpstatus))
  $frmMain.Menu = $mnuMain
  $frmMain.StartPosition = "CenterScreen"
  $frmMain.Text = "Import XLS files into AccessDB"
  $frmMain.Add_Load($frmMain_OnLoad)

  [void]$frmMain.ShowDialog()
}

function ShowAboutWindow {
  $frmAbout = New-Object Windows.Forms.Form
  $lblInfo = New-Object Windows.Forms.Label
  $btnExit = New-Object Windows.Forms.Button

  #lblInfo
  $lblInfo.Location = New-Object Drawing.Point(13, 23)
  $lblInfo.Size = New-Object Drawing.Size(270, 50)
  $lblInfo.Text = "$author powershell script version $scriptVersion-$scriptRelease"

  #btnExit
  $btnExit.Location = New-Object Drawing.Point(100, 80)
  $btnExit.TabIndex = 0
  $btnExit.Text = "Close"
  $btnExit.Add_Click( { $frmAbout.Close() } )

  #frmAbot
  $frmAbout.ClientSize = New-Object Drawing.Size(280, 117)
  $frmAbout.ControlBox = $false
  $frmAbout.Controls.AddRange(@($lblInfo, $btnExit))
  $frmAbout.FormBorderStyle = "FixedSingle"
  $frmAbout.ShowInTaskbar = $false
  $frmAbout.StartPosition = "CenterScreen"
  $frmAbout.Text = "About..."

  [void]$frmAbout.ShowDialog()
}

ShowMainWindow